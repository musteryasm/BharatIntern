# -*- coding: utf-8 -*-
"""BharatInternMLTask1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pITtEz04XFJuhbZWJOD94NAOOj4y0JJV

## Introduction

The following is the internship task for Machine Learning Internship at BharatIntern
This is task 1 : House Price Prediction

1. Data Cleaning
2. Data Visualization
4. Data Preprocessing
4. Building Models

## Imports
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px

from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import MinMaxScaler
from sklearn.model_selection import train_test_split

from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor

from sklearn.metrics import r2_score

"""## Getting Data

Now get the data from our chalange
"""

data = pd.read_csv("/content/train.csv")
data["LONGITUDE"],data["LATITUDE"]=data["LATITUDE"],data["LONGITUDE"]
data.head()

"""We will have a look at the info of our data and check some statistics"""

data.info()

data.describe()

"""We have to check if we have any missing values that we will need to deal with"""

data.isna().sum()

"""## Data Cleaning

Let's begin with cleaning our data.
We will start with extracting the city from the adress so we can transfrom it to string
"""

data["ADDRESS"]= data["ADDRESS"].str.split(",").str[-1]
data.head()

"""### Feature Engineering

Based on clasification of the cities of india found on https://en.wikipedia.org/wiki/Classification_of_Indian_cities.
The idea is to clasify the cities using a map to help our model perform better
"""

def map_city(city):
    if city in ['Ahmedabad', 'Bangalore', 'Chennai', 'Delhi', 'Hyderabad', 'Kolkata', 'Mumbai', 'Pune']:
        return 'tier1'
    elif city in ['Agra', 'Ajmer', 'Aligarh', 'Amravati', 'Amritsar', 'Asansol', 'Aurangabad', 'Bareilly',
                  'Belgaum', 'Bhavnagar', 'Bhiwandi', 'Bhopal', 'Bhubaneswar', 'Bikaner', 'Bilaspur', 'Bokaro Steel City',
                  'Chandigarh', 'Coimbatore', 'Cuttack', 'Dehradun', 'Dhanbad', 'Bhilai', 'Durgapur', 'Dindigul', 'Erode',
                  'Faridabad', 'Firozabad', 'Ghaziabad', 'Gorakhpur', 'Gulbarga', 'Guntur', 'Gwalior', 'Gurgaon', 'Guwahati',
                  'Hamirpur', 'Hubliâ€“Dharwad', 'Indore', 'Jabalpur', 'Jaipur', 'Jalandhar', 'Jammu', 'Jamnagar', 'Jamshedpur',
                  'Jhansi', 'Jodhpur', 'Kakinada', 'Kannur', 'Kanpur', 'Karnal', 'Kochi', 'Kolhapur', 'Kollam', 'Kozhikode',
                  'Kurnool', 'Ludhiana', 'Lucknow', 'Madurai', 'Malappuram', 'Mathura', 'Mangalore', 'Meerut', 'Moradabad',
                  'Mysore', 'Nagpur', 'Nanded', 'Nashik', 'Nellore', 'Noida', 'Patna', 'Pondicherry', 'Purulia', 'Prayagraj',
                  'Raipur', 'Rajkot', 'Rajahmundry', 'Ranchi', 'Rourkela', 'Ratlam', 'Salem', 'Sangli', 'Shimla', 'Siliguri',
                  'Solapur', 'Srinagar', 'Surat', 'Thanjavur', 'Thiruvananthapuram', 'Thrissur', 'Tiruchirappalli', 'Tirunelveli',
                  'Tiruvannamalai', 'Ujjain', 'Bijapur', 'Vadodara', 'Varanasi', 'Vasai-Virar City', 'Vijayawada', 'Visakhapatnam',
                  'Vellore', 'Warangal']:
        return 'tier2'
    else:
        return 'tier3'

data['city_tier'] = data['ADDRESS'].apply(map_city)

"""## Data Visualisation

Now we will have a look at **BHK_OR_RK** we can plot a bar to look at the distribution of the data
"""

print(data["BHK_OR_RK"].value_counts())
plt.bar(["BHK","RK"],data["BHK_OR_RK"].value_counts())

"""All the houses are **BHK** so it makes sens to drop that column. We don't need the **ADDRESS** column anymore because we created a city tier
also we will drop**POSTED BY**as it is of no use
"""

data.drop(['POSTED_BY',"BHK_OR_RK","ADDRESS"], axis=1, inplace = True)
data.head()

"""Now we are intrested to plot a mapbox to look at the distripution of data regards to locations in india for that we will limit the **LONGITUDE** and **LATITUDE** for india"""

data=data[data["LONGITUDE"].between(65,96) & data["LATITUDE"].between(7,36)]

fig = px.density_mapbox(data,  lon = 'LONGITUDE',lat = 'LATITUDE',
                        radius = 8,
                        zoom = 6,
                        mapbox_style = 'open-street-map')
fig.show()

"""### Encoding"""

encoder = LabelEncoder()
data["city_tier"]= encoder.fit_transform(data["city_tier"])

"""### Spliting Data

Since we are going to prepare the data for the ML model, let's create an input training data and the training label, label being **TARGET(PRICE_IN_LACS)**
"""

training_data = data.drop(["TARGET(PRICE_IN_LACS)"],axis=1)
target = data["TARGET(PRICE_IN_LACS)"]

X_train, X_test, y_train, y_test = train_test_split(training_data, target, test_size=0.2, random_state=42)

"""### Scaling"""

scaler = MinMaxScaler()
X_train= scaler.fit_transform(X_train)
X_test= scaler.transform(X_test)

"""## Building Models

### LinearRegression
"""

model = LinearRegression()
model.fit(X_train,y_train)
model.score(X_train, y_train)

"""### Decision Tree"""

model = DecisionTreeRegressor()
model.fit(X_train,y_train)
preds=model.predict(X_test)
print(r2_score(preds,y_test))

"""### Random Forest"""

model = RandomForestRegressor()
model.fit(X_train,y_train)
preds=model.predict(X_test)
print(r2_score(preds,y_test))